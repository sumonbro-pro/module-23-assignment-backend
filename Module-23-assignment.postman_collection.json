{
	"info": {
		"_postman_id": "bfcebc12-9a7d-4348-b1ab-1eae35ac3033",
		"name": "Module-23-assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31534164"
	},
	"item": [
		{
			"name": "Product",
			"item": [
				{
					"name": "ProductBrandList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"",
									"    responseData.data.forEach(function (item) {",
									"        pm.expect(item).to.have.property('_id').that.is.a('string');",
									"        pm.expect(item).to.have.property('brandName').that.is.a('string');",
									"        pm.expect(item).to.have.property('brandImg').that.is.a('string');",
									"        pm.expect(item).to.have.property('createdAt').that.is.a('string');",
									"        pm.expect(item).to.have.property('updatedAt').that.is.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Data array fields are non-empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item._id).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"        pm.expect(item.brandName).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"        pm.expect(item.brandImg).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"        pm.expect(item.createdAt).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"        pm.expect(item.updatedAt).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and updatedAt fields are in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  ",
									"  responseData.data.forEach(function(brand) {",
									"    pm.expect(brand.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Invalid createdAt format\");",
									"    pm.expect(brand.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Invalid updatedAt format\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductBrandList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductBrandList"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductCategoryList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item).to.have.property('_id');",
									"        pm.expect(item).to.have.property('categoryName');",
									"        pm.expect(item).to.have.property('categoryImg');",
									"        pm.expect(item).to.have.property('createdAt');",
									"        pm.expect(item).to.have.property('updatedAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and updatedAt are in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductCategoryList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductCategoryList"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductSliderList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item._id).to.exist;",
									"        pm.expect(item.title).to.exist;",
									"        pm.expect(item.des).to.exist;",
									"        pm.expect(item.image).to.exist;",
									"        pm.expect(item.productID).to.exist;",
									"        pm.expect(item.createdAt).to.exist;",
									"        pm.expect(item.updatedAt).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each data object contains non-empty values for _id, title, des, image, productID, createdAt, and updatedAt\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item._id).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.title).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.des).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.image).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.productID).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.createdAt).to.exist.and.to.not.be.empty;",
									"        pm.expect(item.updatedAt).to.exist.and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and UpdatedAt fields are in valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(item) {",
									"        pm.expect(item.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"CreatedAt is not in valid date format\");",
									"        pm.expect(item.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"UpdatedAt is not in valid date format\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductSliderList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductSliderList"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductListByBrand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
									"    ",
									"    responseData.data.forEach(function(product){",
									"        pm.expect(product).to.have.property('_id');",
									"        pm.expect(product).to.have.property('title');",
									"        pm.expect(product).to.have.property('shortDes');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('discount');",
									"        pm.expect(product).to.have.property('discountPrice');",
									"        pm.expect(product).to.have.property('image');",
									"        pm.expect(product).to.have.property('star');",
									"        pm.expect(product).to.have.property('stock');",
									"        pm.expect(product).to.have.property('remark');",
									"        pm.expect(product).to.have.property('categoryID');",
									"        pm.expect(product).to.have.property('brandID');",
									"        pm.expect(product).to.have.property('createdAt');",
									"        pm.expect(product).to.have.property('updatedAt');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price and discountPrice are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(product) {",
									"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(product.discountPrice).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Image URL is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.be.an('array');",
									"  pm.expect(responseData.data).to.not.be.empty;",
									"",
									"  responseData.data.forEach(function(product) {",
									"    pm.expect(product.image).to.match(/^https?:\\/\\/.+\\.(jpg|png|gif)$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and has expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.data.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductListByBrand/64f8751a502e1b80556da142",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductListByBrand",
								"64f8751a502e1b80556da142"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductListByCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
									"",
									"    const requiredFields = [\"_id\", \"title\", \"shortDes\", \"price\", \"discount\", \"discountPrice\", \"image\", \"star\", \"stock\", \"remark\", \"categoryID\", \"brandID\", \"createdAt\", \"updatedAt\"];",
									"    responseData.data.forEach((product) => {",
									"        requiredFields.forEach((field) => {",
									"            pm.expect(product).to.have.property(field);",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price and discountPrice are non-negative numbers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(product) {",
									"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(product.discountPrice).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Discount is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('array');",
									"  responseData.data.forEach(function(product) {",
									"    pm.expect(product.discount).to.be.a('boolean');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Stock is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  responseData.data.forEach(function(product) {",
									"    pm.expect(product.stock).to.be.a('boolean');",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductListByCategory/64f875ed502e1b80556da14d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductListByCategory",
								"64f875ed502e1b80556da14d"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductListBySimilar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    const requiredFields = [",
									"        \"_id\", \"title\", \"shortDes\", \"price\", \"discount\", \"discountPrice\", ",
									"        \"image\", \"star\", \"stock\", \"remark\", \"categoryID\", \"brandID\", ",
									"        \"createdAt\", \"updatedAt\"",
									"    ];",
									"    ",
									"    requiredFields.forEach(field => {",
									"        pm.expect(responseData).to.have.property(field);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(product) {",
									"        pm.expect(product.price).to.be.a('number');",
									"        pm.expect(product.price).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and UpdatedAt are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt should be in valid date format\");",
									"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductListBySimilar/64f875ed502e1b80556da14d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductListBySimilar",
								"64f875ed502e1b80556da14d"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductListByKeyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    const requiredFields = [",
									"        \"_id\", \"title\", \"shortDes\", \"price\", \"discount\", \"discountPrice\", ",
									"        \"image\", \"star\", \"stock\", \"remark\", \"categoryID\", \"brandID\", ",
									"        \"createdAt\", \"updatedAt\"",
									"    ];",
									"    ",
									"    requiredFields.forEach(function(field) {",
									"        pm.expect(responseData).to.have.property(field);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Price and discountPrice are in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  responseData.data.forEach(function(product) {",
									"    pm.expect(product.price).to.be.a('string').and.to.have.length.above(0);",
									"    pm.expect(product.discountPrice).to.be.a('string').and.to.have.length.above(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains expected number of elements\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
									"  pm.expect(responseData.data).to.have.lengthOf.at.least(1, \"Data array should contain at least one element\");",
									"});",
									"",
									"",
									"pm.test(\"Check if createdAt and updatedAt fields are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"createdAt should be in valid date format\");",
									"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"updatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductListByKeyword/macbook",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductListByKeyword",
								"macbook"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductListByRemark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json().data[0];",
									"    ",
									"    pm.expect(responseData).to.include.all.keys('_id', 'title', 'shortDes', 'price', 'discount', 'discountPrice', 'image', 'star', 'stock', 'remark', 'categoryID', 'brandID', 'createdAt', 'updatedAt');",
									"});",
									"",
									"",
									"pm.test(\"Price and discountPrice are non-negative numbers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.be.an('array');",
									"  ",
									"  responseData.data.forEach(function(product) {",
									"    pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(product.discountPrice).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    pm.expect(responseData.data).to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Remark is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('array');",
									"  responseData.data.forEach(function(product) {",
									"    pm.expect(product.remark).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Remark should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductListByRemark/new",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductListByRemark",
								"new"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('_id');",
									"    pm.expect(responseData).to.have.property('img1');",
									"    pm.expect(responseData).to.have.property('img2');",
									"    pm.expect(responseData).to.have.property('img3');",
									"    pm.expect(responseData).to.have.property('img4');",
									"    pm.expect(responseData).to.have.property('img5');",
									"    pm.expect(responseData).to.have.property('img6');",
									"    pm.expect(responseData).to.have.property('img7');",
									"    pm.expect(responseData).to.have.property('img8');",
									"    pm.expect(responseData).to.have.property('des');",
									"    pm.expect(responseData).to.have.property('color');",
									"    pm.expect(responseData).to.have.property('size');",
									"    pm.expect(responseData).to.have.property('productID');",
									"    pm.expect(responseData).to.have.property('createdAt');",
									"    pm.expect(responseData).to.have.property('updatedAt');",
									"});",
									"",
									"",
									"pm.test(\"Each image URL is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    ",
									"    responseData.data.forEach(function(product) {",
									"        pm.expect(product.img1).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img2).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img3).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img4).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img5).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img6).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img7).to.match(/^https?:\\/\\/\\S+/);",
									"        pm.expect(product.img8).to.match(/^https?:\\/\\/\\S+/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present and contains the expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    pm.expect(responseData.data).to.have.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt and UpdatedAt fields are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdAt).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/, \"CreatedAt should be in valid date format\");",
									"    pm.expect(responseData.updatedAt).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z/, \"UpdatedAt should be in valid date format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductDetails/654dbf25abda0c85053c9902",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductDetails",
								"654dbf25abda0c85053c9902"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductReviewList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    const requiredFields = [\"_id\", \"productID\", \"userID\", \"des\", \"rating\", \"createdAt\", \"updatedAt\"];",
									"    requiredFields.forEach(field => {",
									"        pm.expect(responseData).to.have.property(field);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Data array is present in the response and contains the expected number of elements\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist;",
									"  pm.expect(responseData.data).to.be.an('array');",
									"  pm.expect(responseData.data).to.have.lengthOf(7);",
									"});",
									"",
									"",
									"pm.test(\"Rating is within the valid range\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    responseData.data.forEach(function(review) {",
									"        pm.expect(review.rating).to.exist;",
									"        pm.expect(review.rating).to.be.a('number');",
									"        pm.expect(review.rating).to.be.within(1, 5, \"Rating should be within the range of 1 to 5\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ProductReviewList/654dbf25abda0c85053c9902",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ProductReviewList",
								"654dbf25abda0c85053c9902"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "UserOTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('acknowledged');",
									"  pm.expect(responseData).to.have.property('modifiedCount');",
									"  pm.expect(responseData).to.have.property('upsertedId');",
									"  pm.expect(responseData).to.have.property('upsertedCount');",
									"});",
									"",
									"",
									"pm.test(\"Acknowledged field should be a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.acknowledged).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Modified count is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.modifiedCount).to.be.a('number');",
									"    pm.expect(responseData.modifiedCount).to.satisfy((val) => val >= 0, \"Modified count should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/UserOTP/mail.masudranasumon@gmail.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"UserOTP",
								"mail.masudranasumon@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyLogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const token = pm.response.json().token;",
									"if (token) {",
									"    pm.collectionVariables.set('token', token);",
									"}",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/VerifyLogin/mail.masudranasumon@gmail.com/111111",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"VerifyLogin",
								"mail.masudranasumon@gmail.com",
								"111111"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLogout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/UserLogout/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"UserLogout",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "CreateProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cus_add\": \"{{$randomStreetAddress}}\",\n    \"cus_city\": \"{{$randomCity}}\",\n    \"cus_country\": \"{{$randomCountry}}\",\n    \"cus_fax\": \"{{$randomPhoneNumber}}\",\n    \"cus_name\": \"{{$randomFullName}}\",\n    \"cus_phone\": \"{{$randomPhoneNumber}}\",\n    \"cus_postcode\": \"{{$randomCountryCode}}\",\n    \"cus_state\": \"{{$randomCity}}\",\n    \"ship_add\": \"{{$randomStreetAddress}}\",\n    \"ship_city\": \"{{$randomCity}}\",\n    \"ship_country\": \"{{$randomCountry}}\",\n    \"ship_name\": \"{{$randomFullName}}\",\n    \"ship_phone\": \"{{$randomPhoneNumber}}\",\n    \"ship_postcode\": \"{{$randomCountryCode}}\",\n    \"ship_state\": \"{{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/CreateProfile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"CreateProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cus_add\": \"{{$randomStreetAddress}}\",\n    \"cus_city\": \"{{$randomCity}}\",\n    \"cus_country\": \"{{$randomCountry}}\",\n    \"cus_fax\": \"{{$randomPhoneNumber}}\",\n    \"cus_name\": \"{{$randomFullName}}\",\n    \"cus_phone\": \"{{$randomPhoneNumber}}\",\n    \"cus_postcode\": \"{{$randomCountryCode}}\",\n    \"cus_state\": \"{{$randomCity}}\",\n    \"ship_add\": \"{{$randomStreetAddress}}\",\n    \"ship_city\": \"{{$randomCity}}\",\n    \"ship_country\": \"{{$randomCountry}}\",\n    \"ship_name\": \"{{$randomFullName}}\",\n    \"ship_phone\": \"{{$randomPhoneNumber}}\",\n    \"ship_postcode\": \"{{$randomCountryCode}}\",\n    \"ship_state\": \"{{$randomCity}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/UpdateProfile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"UpdateProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ReadProfile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ReadProfile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Wish",
			"item": [
				{
					"name": "SaveWishList",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productID\": \"654dbf2aabda0c85053c9905\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/SaveWishList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"SaveWishList"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveWishList",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productID\": \"654dbf2aabda0c85053c9905\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/RemoveWishList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"RemoveWishList"
							]
						}
					},
					"response": []
				},
				{
					"name": "WishList",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/WishList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"WishList"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "SaveCartList",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productID\": \"654dbf2cabda0c85053c9906\",\n    \"color\": \"Green\",\n    \"price\": \"250\",\n    \"qty\": \"7\",\n    \"size\": \"xl\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/SaveCartList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"SaveCartList"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveCartList",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productID\": \"654dbf2cabda0c85053c9906\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/RemoveCartList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"RemoveCartList"
							]
						}
					},
					"response": []
				},
				{
					"name": "CartList",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/CartList",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"CartList"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}